{
	"info": {
		"_postman_id": "8b170b7c-16e1-4851-9713-bd6d6961286c",
		"name": "ACA-Py AnonCreds Credential Issuance/Verification Flow",
		"description": "Complete flow to issue and verify AnonCreds credentials using ACA-Py, including schema creation, credential definition, connection establishment, and credential issuance.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42158118",
		"_collection_link": "https://brendanmiller-291657.postman.co/workspace/ASML-Digital-Identity~cafc1b51-adcd-4652-82a9-8009cb4c4ad4/collection/42158118-8b170b7c-16e1-4851-9713-bd6d6961286c?action=share&source=collection_link&creator=42158118"
	},
	"item": [
		{
			"name": "Issue basic credential",
			"item": [
				{
					"name": "1. Check ACA-Py Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/status/ready",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"status",
								"ready"
							]
						},
						"description": "Verify that ACA-Py is running and accessible. This should return a 200 response with agent status information."
					},
					"response": []
				},
				{
					"name": "2. Get Wallet DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"issuer_id\", result.results[0].did);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/wallet/did",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"wallet",
								"did"
							]
						},
						"description": "Retrieve all DIDs in the wallet. Look for a public DID (with 'posture': 'posted') that will be used for schema creation."
					},
					"response": []
				},
				{
					"name": "3. Create AnonCreds Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"schema_id\", result.schema_state.schema_id);",
									"pm.collectionVariables.set(\"issuer_id\", result.schema_state.schema.issuerId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schema\": {\n    \"attrNames\": [\"name\", \"lastName\", \"email\"],\n    \"issuerId\": \"{{issuer_id}}\",\n    \"name\": \"test\",\n    \"version\": \"1.9\"\n  }\n}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/schema",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"schema"
							]
						},
						"description": "Create a new AnonCreds schema on the ledger. The issuerId should be your public DID (without the 'did:sov:' prefix). This creates the schema structure that defines what attributes a credential can have."
					},
					"response": []
				},
				{
					"name": "4. Create Credential Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"credential_definition_id\", result.credential_definition_state.credential_definition_id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential_definition\": {\n    \"schemaId\": \"{{schema_id}}\",\n    \"issuerId\": \"{{issuer_id}}\",\n    \"tag\": \"default\",\n    \"type\": \"CL\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/credential-definition",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"credential-definition"
							]
						},
						"description": "Create a credential definition based on the schema. This defines the cryptographic parameters and issuer-specific information for the credential type."
					},
					"response": []
				},
				{
					"name": "5. Create Connection Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"connection_id\", result.connection_id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections/create-invitation",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections",
								"create-invitation"
							]
						},
						"description": "Create a connection invitation that can be scanned by a wallet (like Bifold) to establish a secure connection for credential exchange."
					},
					"response": []
				},
				{
					"name": "6. Check Connection Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections"
							]
						},
						"description": "Check the status of all connections. Look for the connection with your wallet and ensure it's in 'active' state before proceeding with credential issuance."
					},
					"response": []
				},
				{
					"name": "7. Issue AnonCreds Credential",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"connection_id\": \"{{connection_id}}\",\n    \"filter\": {\n        \"anoncreds\": {\n            \"cred_def_id\": \"{{credential_definition_id}}\"\n        }\n    },\n    \"auto_remove\": false,\n    \"credential_preview\": {\n        \"@type\": \"issue-credential/2.0/credential-preview\",\n        \"attributes\": [\n            {\n                \"name\": \"name\",\n                \"value\": \"Brendan\"\n            },\n            {\n                \"name\": \"lastName\",\n                \"value\": \"Miller\"\n            },\n             {\n                \"name\": \"email\",\n                \"value\": \"brmiller@law.harvard.edu\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/issue-credential-2.0/send",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"issue-credential-2.0",
								"send"
							]
						},
						"description": "Send a credential offer to the connected wallet. This initiates the credential issuance process. The wallet will receive the offer and can accept it to receive the credential."
					},
					"response": []
				},
				{
					"name": "8. Check Credential Exchange Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/issue-credential-2.0/records",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"issue-credential-2.0",
								"records"
							]
						},
						"description": "Check the status of credential exchanges. Look for the latest exchange and verify it reaches 'done' state, indicating successful credential issuance."
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify basic credential",
			"item": [
				{
					"name": "1. Check ACA-Py Status",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{ADMIN_API_KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-KEY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/status",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Verify that ACA-Py is running and accessible. This should return a 200 response with agent status information."
					},
					"response": []
				},
				{
					"name": "2. Create Connection Invitation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections/create-invitation",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections",
								"create-invitation"
							]
						},
						"description": "Create a connection invitation that can be scanned by a wallet (like Bifold) to establish a secure connection for credential exchange."
					},
					"response": []
				},
				{
					"name": "3. Check Connection Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections"
							]
						},
						"description": "Check the status of all connections. Look for the connection with your wallet and ensure it's in 'active' state before proceeding with credential issuance."
					},
					"response": []
				},
				{
					"name": "4. Generate proof",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"pres_ex_id\", result.pres_ex_id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"connection_id\": \"{{connection_id}}\",\n    \"anoncreds\": {\n      \"cred_def_id\": \"{{credential_definition_id}}\"\n    },\n  \"presentation_request\": {\n    \"anoncreds\": {\n      \"name\": \"Test Proof\",\n      \"version\": \"1.0\",\n      \"requested_attributes\": {\n        \"email\": {\n          \"name\": \"email\",\n          \"restrictions\": [\n            {\n              \"cred_def_id\": \"{{credential_definition_id}}\"\n            }\n          ]\n        }\n      },\n      \"requested_predicates\": {},\n      \"nonce\": \"1234567890\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/send-request",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"send-request"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Confirm proof presentation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/records/4fc29ec3-267c-4f86-bc87-74e9cd6bc6d8",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"records",
								"4fc29ec3-267c-4f86-bc87-74e9cd6bc6d8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Helper APIs",
			"item": [
				{
					"name": "GET all anoncred schemas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/schemas",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all anoncred definitions",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential_definition\": {\n    \"schemaId\": \"XAJrzf52MGbagMucwu4EfE:2:test2:1.0\",\n    \"issuerId\": \"XAJrzf52MGbagMucwu4EfE\",\n    \"tag\": \"default\",\n    \"type\": \"CL\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/credential-definitions",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"credential-definitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "View proof records",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/records",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "View a proof record",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/records/{{pres_ex_id}}",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"records",
								"{{pres_ex_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Connections",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections"
							]
						},
						"description": "Check the status of all connections. Look for the connection with your wallet and ensure it's in 'active' state before proceeding with credential issuance."
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Issue mock mDL",
			"item": [
				{
					"name": "1. Check ACA-Py Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/status/ready",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"status",
								"ready"
							]
						},
						"description": "Verify that ACA-Py is running and accessible. This should return a 200 response with agent status information."
					},
					"response": []
				},
				{
					"name": "2. Get Wallet DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_issuer_id\", result.results[0].did);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/wallet/did",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"wallet",
								"did"
							]
						},
						"description": "Retrieve all DIDs in the wallet. Look for a public DID (with 'posture': 'posted') that will be used for mDL schema creation."
					},
					"response": []
				},
				{
					"name": "3. Create mDL AnonCreds Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_schema_id\", result.schema_state.schema_id);",
									"pm.collectionVariables.set(\"mdl_issuer_id\", result.schema_state.schema.issuerId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schema\": {\n    \"attrNames\": [\"document_number\", \"issue_date\", \"expiry_date\", \"issuing_authority\", \"issuer_country\", \"issuer_state\", \"given_name\", \"family_name\", \"date_of_birth\", \"sex\", \"vehicle_class\", \"organ_donor\"],\n    \"issuerId\": \"{{mdl_issuer_id}}\",\n    \"name\": \"mock_mdl\",\n    \"version\": \"1.0\"\n  }\n}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/schema",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"schema"
							]
						},
						"description": "Create a new AnonCreds schema for mock mDL credentials. This schema includes all the standard mDL fields including date_of_birth for age verification predicates."
					},
					"response": []
				},
				{
					"name": "4. Create mDL Credential Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_credential_definition_id\", result.credential_definition_state.credential_definition_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential_definition\": {\n    \"schemaId\": \"{{mdl_schema_id}}\",\n    \"issuerId\": \"{{mdl_issuer_id}}\",\n    \"tag\": \"mdl\",\n    \"type\": \"CL\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/anoncreds/credential-definition",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"anoncreds",
								"credential-definition"
							]
						},
						"description": "Create a credential definition for mock mDL credentials. This enables the issuance of mDL credentials with zero-knowledge proof capabilities."
					},
					"response": []
				},
				{
					"name": "5. Create Connection Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_connection_id\", result.connection_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections/create-invitation",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections",
								"create-invitation"
							]
						},
						"description": "Create a connection invitation for mDL credential issuance. Scan this invitation with your wallet to establish a secure connection."
					},
					"response": []
				},
				{
					"name": "6. Check Connection Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections"
							]
						},
						"description": "Check the status of all connections. Ensure the mDL connection is in 'active' state before proceeding with credential issuance."
					},
					"response": []
				},
				{
					"name": "7. Issue Mock mDL Credential",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"connection_id\": \"{{mdl_connection_id}}\",\n    \"filter\": {\n        \"anoncreds\": {\n            \"cred_def_id\": \"{{mdl_credential_definition_id}}\"\n        }\n    },\n    \"auto_remove\": false,\n    \"credential_preview\": {\n        \"@type\": \"issue-credential/2.0/credential-preview\",\n        \"attributes\": [\n            {\n                \"name\": \"document_number\",\n                \"value\": \"D12345678\"\n            },\n            {\n                \"name\": \"issue_date\",\n                \"value\": \"2023-05-01\"\n            },\n            {\n                \"name\": \"expiry_date\",\n                \"value\": \"2028-05-01\"\n            },\n            {\n                \"name\": \"issuing_authority\",\n                \"value\": \"CA DMV\"\n            },\n            {\n                \"name\": \"issuer_country\",\n                \"value\": \"US\"\n            },\n            {\n                \"name\": \"issuer_state\",\n                \"value\": \"CA\"\n            },\n            {\n                \"name\": \"given_name\",\n                \"value\": \"JANE\"\n            },\n            {\n                \"name\": \"family_name\",\n                \"value\": \"DOE\"\n            },\n            {\n                \"name\": \"date_of_birth\",\n                \"value\": \"20010830\"\n            },\n            {\n                \"name\": \"sex\",\n                \"value\": \"F\"\n            },\n            {\n                \"name\": \"vehicle_class\",\n                \"value\": \"C\"\n            },\n            {\n                \"name\": \"organ_donor\",\n                \"value\": \"true\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/issue-credential-2.0/send",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"issue-credential-2.0",
								"send"
							]
						},
						"description": "Send a mock mDL credential offer to the connected wallet. This credential includes all standard mDL fields and can be used for zero-knowledge age verification."
					},
					"response": []
				},
				{
					"name": "8. Check mDL Credential Exchange Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/issue-credential-2.0/records/{{cred_ex_id}}",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"issue-credential-2.0",
								"records",
								"{{cred_ex_id}}"
							]
						},
						"description": "Check the status of mDL credential exchanges. Verify the exchange reaches 'done' state, indicating successful credential issuance."
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify mock mDL with ZKP",
			"item": [
				{
					"name": "1. Check ACA-Py Status",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{ADMIN_API_KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-KEY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/status",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Verify that ACA-Py is running and accessible for mDL verification."
					},
					"response": []
				},
				{
					"name": "2. Create Connection Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_verifier_connection_id\", result.connection_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections/create-invitation",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections",
								"create-invitation"
							]
						},
						"description": "Create a connection invitation for mDL verification. This establishes a secure connection for proof presentation."
					},
					"response": []
				},
				{
					"name": "3. Check Connection Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/connections",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"connections"
							]
						},
						"description": "Check the status of all connections. Ensure the mDL verification connection is in 'active' state."
					},
					"response": []
				},
				{
					"name": "4. Request mDL Proof with Age ZKP(+21)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const result = pm.response.json();",
									"pm.collectionVariables.set(\"mdl_pres_ex_id\", result.pres_ex_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get current year",
									"const year = new Date().getFullYear();",
									"",
									"// Calculate 21 years ago",
									"const twentyOneYearsAgo = new Date();",
									"twentyOneYearsAgo.setFullYear(year - 21);",
									"",
									"// Calculate threshold in YYYYMMDD format",
									"const twentyOneThreshold = parseInt(",
									"    twentyOneYearsAgo.getFullYear() + ",
									"    String(twentyOneYearsAgo.getMonth() + 1).padStart(2, '0') + ",
									"    String(twentyOneYearsAgo.getDate()).padStart(2, '0')",
									");",
									"",
									"// Store for use in predicates",
									"pm.collectionVariables.set(\"twenty_one_plus_threshold\", twentyOneThreshold);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"connection_id\": \"{{mdl_verifier_connection_id}}\",\n    \"anoncreds\": {\n        \"cred_def_id\": \"{{mdl_credential_definition_id}}\"\n    },\n    \"presentation_request\": {\n        \"anoncreds\": {\n            \"name\": \"mDL Age Verification\",\n            \"version\": \"1.0\",\n            \"requested_attributes\": {\n                \"issuing_authority\": {\n                    \"name\": \"issuing_authority\",\n                    \"restrictions\": [\n                        {\n                            \"cred_def_id\": \"{{mdl_credential_definition_id}}\"\n                        }\n                    ]\n                }\n            },\n            \"requested_predicates\": {\n                \"age_verification\": {\n                    \"name\": \"date_of_birth\",\n                    \"p_type\": \"<=\",\n                    \"p_value\": {{twenty_one_plus_threshold}},\n                    \"restrictions\": [\n                        {\n                            \"cred_def_id\": \"{{mdl_credential_definition_id}}\"\n                        }\n                    ]\n                }\n            },\n            \"nonce\": \"1233431\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/send-request",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"send-request"
							]
						},
						"description": "Request a proof presentation that reveals only the given name, family name, and issuing authority, while using a zero-knowledge predicate to prove the person is over 18 (born before 2005-01-01) without revealing the actual birth date."
					},
					"response": []
				},
				{
					"name": "5. Check mDL Proof Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_ENDPOINT}}/present-proof-2.0/records/{{mdl_pres_ex_id}}",
							"host": [
								"{{ADMIN_ENDPOINT}}"
							],
							"path": [
								"present-proof-2.0",
								"records",
								"{{mdl_pres_ex_id}}"
							]
						},
						"description": "Check the status of the mDL proof presentation. Look for 'verified' state to confirm the zero-knowledge age verification was successful."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8031",
			"type": "string"
		},
		{
			"key": "connection_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "schema_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "cred_def_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "cred_ex_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "issuer_id",
			"value": ""
		},
		{
			"key": "credential_definition_id",
			"value": ""
		},
		{
			"key": "pres_ex_id",
			"value": ""
		},
		{
			"key": "mdl_issuer_id",
			"value": ""
		},
		{
			"key": "mdl_schema_id",
			"value": ""
		},
		{
			"key": "mdl_credential_definition_id",
			"value": ""
		},
		{
			"key": "mdl_connection_id",
			"value": ""
		},
		{
			"key": "mdl_verifier_connection_id",
			"value": ""
		},
		{
			"key": "mdl_pres_ex_id",
			"value": ""
		},
		{
			"key": "mdl_pres_ex_id_21",
			"value": ""
		},
		{
			"key": "today_date",
			"value": ""
		},
		{
			"key": "eighteen_plus_threshold",
			"value": ""
		},
		{
			"key": "twenty_one_plus_threshold",
			"value": ""
		}
	]
}